<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
	http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
	http://www.springframework.org/schema/rabbit 
	http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

	  
	<!-- 注入ApplicationContext，开发人员可以使用 WebContextFactoryUtil提供的getBean方法获取注入的bean对象 -->
	<bean class="cn.jasgroup.jasframework.utils.web.WebContextFactoryUtil"></bean>
	
	<context:component-scan base-package="cn.jasgroup.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- Settings and future properties files -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:framework.properties</value>
				<value>classpath:*App.properties</value>
			</list>
		</property>
	</bean>

	<!-- 平台默认数据源配置 -->
	<!-- <bean id="defaultDataSource" class="org.apache.commons.dbcp.BasicDataSource"> -->
	<bean id="defaultDataSource" class="cn.jasgroup.jasframework.dataaccess3.pool.DataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<!-- 是否获取字段注释，主要用于Oracle -->
		<property name="defaultAutoCommit" value="true" />
		<property name="remarksReporting" value="true" />
	</bean>


	<!-- 平台数据源配置，支持多数据源 -->
	<bean id="dataSource"
		class="cn.jasgroup.jasframework.dataaccess.datasource.MultiDataSource">
		<property name="dataSource" ref="defaultDataSource" />
	</bean>

	<bean id="jasEntityInterceptor"
		class="cn.jasgroup.jasframework.engine.hibernate.interceptor.JasEntityInterceptor"></bean>
	<!-- hibernate sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="mappingLocations">
			<list>
				<value>classpath:cn/jasgroup/**/*.hbm.xml</value>
			</list>
		</property>
		<property name="packagesToScan">
			<list>
				<value>cn.jasgroup.**.entity</value>
			</list>
		</property>
		<property name="mappingJarLocations">
			<list>
				<value>WEB-INF/lib/jasframework*.jar</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${hibernate.dialect}
				</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.jdbc.batch_size">3000</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.cascade">true</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.default_schema">${hibernate.default_schema}</prop>
				<!-- 开启二级缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<!-- 配置二级缓存提供商 -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop>
			</props>
		</property>
		<property name="entityInterceptor">
			<ref bean="jasEntityInterceptor" />
		</property>

	</bean>

	<!-- enables scanning for @Transactional annotations -->
	<tx:annotation-driven transaction-manager="hibernateManager"
		proxy-target-class="true" />

	<!-- hibernate 事物管理器配置 -->
	<bean id="hibernateManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<!-- hibernate 事物拦截器配置 -->
	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="hibernateManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="execute*">PROPAGATION_REQUIRED</prop>
				<prop key="batchExecute*">PROPAGATION_REQUIRED</prop>
				<prop key="batchUpdate*">PROPAGATION_REQUIRED</prop>
				<!-- workflow -->
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- 配置哪些bean被事物拦截器拦截 以ServiceImpl结尾的bean会被事物拦截器拦截，进行事物处理 -->
	<bean id="autoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*ServiceImpl</value><!--loginLogServiceImpl -->
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>transactionInterceptor</value>
			</list>
		</property>
	</bean>

	<!-- hibernateTemplate配置，hibernate数据操作接口使用 -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- jdbcTemplate配置，jdbc数据操作接口使用 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- namedParameterJdbcTemplate配置，jdbc具名数据操作接口使用 -->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	
	<!-- 基于jdbc参数占位符实现 -->
	<bean id="baseNamedParameterJdbcTemplate" 
		class="cn.jasgroup.jasframework.dataaccess3.core.BaseNamedParameterJdbcTemplate"></bean>

	<!-- spring mvc 注解处理器配置 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<util:list id="beanList">
				<ref bean="mappingJacksonHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter"></bean>
				<bean class="org.springframework.http.converter.FormHttpMessageConverter"></bean>
			</util:list>
		</property>
	</bean>

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
				<value>application/x-www-form-urlencoded</value>
			</list>
		</property>
	</bean>

	<!-- ==============异常处理切面配置 开始 ============== -->
	<!-- 异常处理切面配置 -->
	<!-- <aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* cn.jasgroup.jasframework..*(..))"
			advice-ref="exceptionAdvisor" />
	</aop:config>
	异常处理切面类（拦截器类），统一进行异常处理
	<bean id="exceptionAdvisor" class="cn.jasgroup.jasframework.exception.ExceptionAdvisor"></bean> -->
	<!-- ==============异常处理切面配置 结束 ============== -->


	<!-- gis  -->
	<bean id="geodataProcessService" class="cn.jasgroup.gis.dataprocess.opengis.GeodataProcessService">
	    <property name="geometryService" ref="geometryService" ></property>
	    <property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate" ></property>
	</bean>
	<bean id="geodataPersistenceService" class="cn.jasgroup.gis.data.opengis.GeodataPersistenceService" >
	    <property name="geodataAccessService" ref="geodataAccessService" ></property>
	    <property name="geodataProcessService" ref="geodataProcessService" ></property>
	    <property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate" ></property>
	</bean>
	<bean id="geometryService" class="cn.jasgroup.gis.geometryservice.opengis.GeometryService">
	    <property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate" ></property>
	</bean>
	<bean id="geodataAccessService" class="cn.jasgroup.gis.dataaccess.opengis.GeodataAccessService" init-method="init">
	    <property name="namedParameterJdbcTemplate" ref="namedParameterJdbcTemplate" ></property>
	</bean>


	<!-- redisTemplate配置开始 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
	</bean>

	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"
		p:pool-config-ref="poolConfig" />

	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	<!-- redisTemplate配置结束 -->

	<!-- restTemplate 配置开始 -->
	<!--Http client Factory -->
	<bean id="httpClientFactory"
		class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<property name="connectTimeout" value="${rest.connectTimeout}" />
		<property name="readTimeout" value="${rest.readTimeout}" />
	</bean>

	<!--RestTemplate -->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="httpClientFactory" />
	</bean>
	<!-- restTemplate 配置结束 -->

	<!--注入移动端文件上传自定义类覆盖MultipartResolver -->
	<bean id="multipartResolver"
		class="cn.jasgroup.jasframework.attachment.util.CustomMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<!--排除使用ServletFileUpload方式的请求, 逗号分隔可配置多个 -->
		<property name="excludeUrls"
			value="doccenter/uploadDoc.do,attachment/upload.do,importExcelController/importExcelData.do,jasframework/excelTemplate/upload.do,daq/weldcut/importExcelDataByName.do,daq/weldcut/importExcelDataByCode.do" />
		<!-- 上传文件总大小 -->
		<!-- <property name="maxUploadSize" value="200000"/> -->
	</bean>

	<!-- <bean id="businessLogTemplate" class="cn.jasgroup.jasframework.log.client.businesslog.BaseBusinessLogTemplate"/> -->
	<!-- 将日志保存到数据库 -->
	<bean id="businessLogTemplate" class="cn.jasgroup.jasframework.log.client.businesslog.DbBusinessLogTemplate">
		 <property name="jdbcTemplate"  ref="baseNamedParameterJdbcTemplate" />  
	</bean>
	<!-- 将日志保存到数据库 -->
	<bean id="optLogTemplate" class="cn.jasgroup.jasframework.log.client.optlog.DbOptLogTemplate">
		 <property name="jdbcTemplate"  ref="baseNamedParameterJdbcTemplate" />  
	</bean> 
	
    <!--rabbit mq配置-->  
    <!--配置connection-factory，指定连接rabbit server参数 -->  
    <rabbit:connection-factory 
    	id="rabbitConnectionFactory"  
        host="${rabbit.connect.host}" 
        port="${rabbit.connect.port}" 
        username="${rabbit.connect.username}"  
        password="${rabbit.connect.password}" 
        channel-cache-size="${rabbit.connect.channelCacheSize}"
        virtual-host="${rabbit.connect.virtualHost}"
        publisher-returns="true" 
        publisher-confirms="true" />  
  
    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 -->  
    <rabbit:admin connection-factory="rabbitConnectionFactory" />  
    <rabbit:template id="amqpTemplate" connection-factory="rabbitConnectionFactory" />  
  
    <!--定义queue  说明：durable:是否持久化   exclusive: 仅创建者可以使用的私有队列，断开后自动删除   auto_delete: 当所有消费客户端连接断开后，是否自动删除队列-->  
    <rabbit:queue name="${rabbit.queue.spatial}" durable="true" auto-delete="false" exclusive="false" />  
 
    
    <!--定义topic-exchange -->  
    <rabbit:topic-exchange name="mq.jasExChange" durable="true" auto-delete="false">  
        <rabbit:bindings>  
            <rabbit:binding queue="${rabbit.queue.spatial}" pattern="mq.spatial.send"></rabbit:binding>  
            <!-- <rabbit:binding queue="mq.other" pattern="mq.other.send"></rabbit:binding>   -->
        </rabbit:bindings>  
    </rabbit:topic-exchange>   
     
    
    <!-- 消息接收者 -->
    <bean id="spatialListener" class="cn.jasgroup.gis.data.opengis.SpatialPersistenceListener"></bean>
    <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->  
    <rabbit:listener-container connection-factory="rabbitConnectionFactory" acknowledge="manual">  <!--  -->
         <rabbit:listener  queues="${rabbit.queue.spatial}"  ref="spatialListener"/>  
    </rabbit:listener-container>  
    <!--rabbit 配置-->
	
	
	<!-- 工作流 -->
	<import resource="classpath*:config/workflow/workflow-dispatcher-servlet.xml" />
	<!-- 工作流 -->
	<import resource="classpath*:config/workflow/workflow-service.xml" />
	<!-- 工作流 -->
	<import resource="classpath*:config/workflow/workflow-dao.xml" />

</beans>